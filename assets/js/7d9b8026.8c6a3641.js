"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1732],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},h=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,d=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return a?n.createElement(d,l(l({ref:t},h),{},{components:a})):n.createElement(d,l({ref:t},h))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9479:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:1},l="A Telegram bot powered by ChatGPT",i={unversionedId:"tutorials/telegram-chatgpt",id:"tutorials/telegram-chatgpt",title:"A Telegram bot powered by ChatGPT",description:"In this article, I will show you how to create a flow function that incorporates ChatGPT services. This flow function is a Telegram bot.",source:"@site/docs/tutorials/telegram-chatgpt.md",sourceDirName:"tutorials",slug:"/tutorials/telegram-chatgpt",permalink:"/docs/tutorials/telegram-chatgpt",draft:!1,editUrl:"https://github.com/flows-network/docs/tree/main/docs/tutorials/telegram-chatgpt.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"A Slack bot powered by ChatGPT",permalink:"/docs/tutorials/slack-chatgpt"},next:{title:"Create a knowledge-based chatbot",permalink:"/docs/tutorials/embeddings"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Prepare the source code",id:"prepare-the-source-code",level:2},{value:"Import and build",id:"import-and-build",level:2},{value:"Configure the OpenAI API key",id:"configure-the-openai-api-key",level:2},{value:"Deploy",id:"deploy",level:2},{value:"Test it!",id:"test-it",level:2},{value:"Code walkthrough",id:"code-walkthrough",level:2},{value:"Read more",id:"read-more",level:2}],h={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"a-telegram-bot-powered-by-chatgpt"},"A Telegram bot powered by ChatGPT"),(0,r.kt)("p",null,"In this article, I will show you how to create a flow function that incorporates ChatGPT services. This flow function is a Telegram bot.\nYou can chat with it in a conversation. All the bot answers come from ChatGPT. You can change the ChatGPT prompt in the bot's source code\nfor the bot to take on different personalities. "),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can also ",(0,r.kt)("a",{parentName:"p",href:"https://flows.network/flow/createByTemplate/Telegram-ChatGPT"},"create the Telegram bot through a flow template"),". The template is an easy-to-use no-code solution, but it is also less flexible.")),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"A GitHub account to log into the ",(0,r.kt)("a",{parentName:"li",href:"https://flows.network/"},"flows.network")," platform. It's free."),(0,r.kt)("li",{parentName:"ol"},"A Telegram bot token."),(0,r.kt)("li",{parentName:"ol"},"An OpenAI API key.")),(0,r.kt)("h2",{id:"prepare-the-source-code"},"Prepare the source code"),(0,r.kt)("p",null,"For this tutorial, we already created ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/flows-network/telegram-chatgpt/"},"a repo named ",(0,r.kt)("inlineCode",{parentName:"a"},"telegram-gpt"))," for you to fork."),(0,r.kt)("h2",{id:"import-and-build"},"Import and build"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://flows.network/flow/new"},"Click here")," to import your forked source code repo for the flow function into flows.network."),(0,r.kt)("p",null,"For this flow function, we need to add a Telegram bot token in settings so that it can listen for messages from a specific Telegram bot.\nPlease refer to ",(0,r.kt)("a",{parentName:"p",href:"https://flows.network/blog/telegram-token"},"How to create a Telegram chat bot")," on how to get your Telegram bot token.\nClick on the ",(0,r.kt)("strong",{parentName:"p"},"Advanced")," link to configure the settings."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"telegram_token"),(0,r.kt)("td",{parentName:"tr",align:null},"Copied from Telegram @botfather")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"placeholder_text"),(0,r.kt)("td",{parentName:"tr",align:null},'Optional: The "wait" message displayed to the user while the bot waits for ChatGPT replies')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"system_prompt"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional: The system level prompt that sets the context for the entire conversation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"help_mesg"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional: The help message displayed to the user for the /help command")))),(0,r.kt)("p",null,"Click on the ",(0,r.kt)("strong",{parentName:"p"},"Build")," button to create the flow funtion."),(0,r.kt)("h2",{id:"configure-the-openai-api-key"},"Configure the OpenAI API key"),(0,r.kt)("p",null,"Enter your OpenAI API key on the next screen. You can have multiple keys and give each of them a name. You can\nthen access the keys by their names through the OpenAI SDK in the flow function."),(0,r.kt)("h2",{id:"deploy"},"Deploy"),(0,r.kt)("p",null,"Finally, you will be redirected to the flow details page, where you can check for\nservice status and logs.\nTelegram and OpenAI should appear as connected external services on this page."),(0,r.kt)("h2",{id:"test-it"},"Test it!"),(0,r.kt)("p",null,"When the status of the flow is ready and running, you can start sending messages to your bot!"),(0,r.kt)("h2",{id:"code-walkthrough"},"Code walkthrough"),(0,r.kt)("p",null,"The source code for the flow function is written in the Rust programming language.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"on_deploy()")," function is called by the flows.network platform when the flow is deployed. We start a listener for\nthe designated bot in ",(0,r.kt)("inlineCode",{parentName:"p"},"on_deploy()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'pub async fn on_deploy() {\n    let telegram_token = std::env::var("telegram_token").unwrap();\n    listen_to_update(telegram_token).await;\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"handler()")," function is annotated with ",(0,r.kt)("inlineCode",{parentName:"p"},"#[update_handler]"),". It is called when the bot receives an update, which could be a message, a file, or a command.\nIf the incoming update is a message, we first\ndetect if the message is ",(0,r.kt)("inlineCode",{parentName:"p"},"/restart")," command. For this command, it will set a flag in a KV store provided by the\nflows.network platform. The flow function can access the KV store using the ",(0,r.kt)("inlineCode",{parentName:"p"},"store"),' API in the SDK.\nWhen the flag is set, the flow function knows to "restart" the conversation when it is triggered the next time.\nThat is, it will start a new conversation when the user sends in a new message after ',(0,r.kt)("inlineCode",{parentName:"p"},"/restart"),"."),(0,r.kt)("p",null,"sends\nthe placeholder message back to the user asking him to wait.\nNote that ",(0,r.kt)("inlineCode",{parentName:"p"},"chat_id")," uniquely identifies the Discord conversation for this bot message\nas the bot can be in multiple conversations at the same time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[update_handler]\nasync fn handler(update: Update) {\n    let telegram_token = std::env::var("telegram_token").unwrap();\n    let placeholder_text = std::env::var("placeholder").unwrap_or("Typing ...".to_string());\n    let system_prompt = std::env::var("system_prompt").unwrap_or("You are a helpful assistant answering questions on Telegram.".to_string());\n    let help_mesg = std::env::var("help_mesg").unwrap_or("I am your assistant on Telegram. Ask me any question! To start a new conversation, type the /restart command.".to_string());\n\n    let tele = Telegram::new(telegram_token.to_string());\n\n    if let UpdateKind::Message(msg) = update.kind {\n        let chat_id = msg.chat.id;\n\n        let text = msg.text().unwrap_or("");\n        if text.eq_ignore_ascii_case("/help") {\n            _ = tele.send_message(chat_id, &help_mesg);\n\n        } else if text.eq_ignore_ascii_case("/restart") {\n            _ = tele.send_message(chat_id, "Ok, I am starting a new conversation.");\n            set(&chat_id.to_string(), json!(true), None);\n')),(0,r.kt)("p",null,"Now, we know that the message is a question or statement from the user. Before querying ChatGPT, we will first send back a placeholder\nmessage asking the user to wait."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let placeholder = tele\n    .send_message(chat_id, &placeholder_text)\n    .expect("Error occurs when sending Message to Telegram");\n')),(0,r.kt)("p",null,"Then, we send the bot message ChatGPT via the OpenAI SDK. Once we receive a reply, we will replace the placeholder message\nwith the actual reply. Note that the OpenAI SDK automatically caches the conversation history,\nincluding the ",(0,r.kt)("inlineCode",{parentName:"p"},"system_prompt")," at the beginning, so that you do not need to replay the entire conversation at every request.\nThe conversation history is cached under the key ",(0,r.kt)("inlineCode",{parentName:"p"},"chat_id"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let mut openai = OpenAIFlows::new();\nopenai.set_retry_times(3);\nlet mut co = ChatOptions {\n    model: ChatModel::GPT35Turbo,\n    restart: false,\n    system_prompt: Some(&system_prompt),\n};\n\nmatch openai.chat_completion(&chat_id.to_string(), &text, &co).await {\n    Ok(r) => {\n        _ = tele.edit_message_text(chat_id, placeholder.id, r.choice);\n    }\n}\n")),(0,r.kt)("p",null,"As you can see, the flow function gives you fine-grained control over the interactions between Telegram and ChatGPT\nso that you can deliver a fully customized experience for your bot users."),(0,r.kt)("h2",{id:"read-more"},"Read more"),(0,r.kt)("p",null,"Tutorials and sample code for related flow functions. Click on the ",(0,r.kt)("strong",{parentName:"p"},"Deploy")," link to ",(0,r.kt)("a",{parentName:"p",href:"../category/getting-started-with-templates"},"configure and deploy your own flow without writing any code from a template"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Discord bot with ChatGPT ",(0,r.kt)("a",{parentName:"li",href:"discord-chatgpt"},"Tutorial")," | ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/flows-network/discord-chatgpt/"},"Code")," | ",(0,r.kt)("a",{parentName:"li",href:"https://flows.network/flow/createByTemplate/discord-chatgpt"},"Deploy")),(0,r.kt)("li",{parentName:"ul"},"Telegram bot with ChatGPT ",(0,r.kt)("a",{parentName:"li",href:"telegram-chatgpt"},"Tutorial")," | ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/flows-network/telegram-gpt"},"Code")," | ",(0,r.kt)("a",{parentName:"li",href:"https://flows.network/flow/createByTemplate/Telegram-ChatGPT"},"Deploy")),(0,r.kt)("li",{parentName:"ul"},"Slack bot with ChatGPT ",(0,r.kt)("a",{parentName:"li",href:"slack-chatgpt"},"Tutorial")," | ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/flows-network/slack-chatgpt"},"Code")," | ",(0,r.kt)("a",{parentName:"li",href:"https://flows.network/flow/createByTemplate/Slack-Chatgpt"},"Deploy")),(0,r.kt)("li",{parentName:"ul"},"GitHub comment bot with ChatGPT ",(0,r.kt)("a",{parentName:"li",href:"github-chatgpt"},"Tutorial")," | ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/flows-network/chatgpt-github-app"},"Code"))))}c.isMDXComponent=!0}}]);