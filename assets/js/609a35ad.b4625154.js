"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7122],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},990:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:10},o="Twitter",s={unversionedId:"external-service/twitter",id:"external-service/twitter",title:"Twitter",description:"The twitterflows library allows you to create Twitter bots hosted on the Flows Network platform. You can easily handle events like receiving and sending messages, and interact with Twitter's API functionality.",source:"@site/docs/external-service/twitter.md",sourceDirName:"external-service",slug:"/external-service/twitter",permalink:"/docs/external-service/twitter",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/external-service/twitter.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Cloud Vision",permalink:"/docs/external-service/cloud-vision"},next:{title:"Airtable",permalink:"/docs/external-service/airtable"}},l={},c=[{value:"Trigger",id:"trigger",level:2},{value:"Action",id:"action",level:2},{value:"Recommended flows and templates",id:"recommended-flows-and-templates",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"twitter"},"Twitter"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/twitter_flows"},(0,i.kt)("inlineCode",{parentName:"a"},"twitter_flows"))," library allows you to create Twitter bots hosted on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Flows Network")," platform. You can easily handle events like receiving and sending messages, and interact with Twitter's API functionality."),(0,i.kt)("h2",{id:"trigger"},"Trigger"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Flows Function")," waits for an event to occur on Twitter. This event could be the posting of a new tweet, the liking of a tweet, etc. For our example on this page, the function utilizes the method ",(0,i.kt)("inlineCode",{parentName:"p"},"channel_msg_received()")," to check for new messages in a specified Slack channel."),(0,i.kt)("h2",{id:"action"},"Action"),(0,i.kt)("p",null,"When a function is triggered by an event, it performs a corresponding action. In this case, the action could be creating a new tweet on Twitter. The action to be taken upon receiving a message or an event is defined by the user."),(0,i.kt)("h2",{id:"recommended-flows-and-templates"},"Recommended flows and templates"),(0,i.kt)("p",null,"Here is a minimal example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use twitter_flows::create_tweet;\nuse slack_flows::{channel_msg_received};\n\n#[no_mangle]\npub fn run() {\n    if let Some(sm) = channel_msg_received("myworkspace", "mychannel") {\n        let tweet = serde_json::json!({\n            "text": sm.text,\n        });\n        create_tweet("mytwitteruser", tweet);\n    }\n}\n')),(0,i.kt)("p",null,"When you receive a Slack message in a predefined channel, this program create a new tweet in Twitter using ",(0,i.kt)("inlineCode",{parentName:"p"},"create_tweet"),"."))}u.isMDXComponent=!0}}]);