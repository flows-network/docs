"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1216],{3905:(e,t,r)=>{r.d(t,{Zo:()=>f,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},f=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),p=c(r),d=o,m=p["".concat(l,".").concat(d)]||p[d]||u[d]||s;return r?n.createElement(m,a(a({ref:t},f),{},{components:r})):n.createElement(m,a({ref:t},f))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<s;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4316:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const s={sidebar_position:2},a="State Store",i={unversionedId:"integrations/platform-sdk-features/store",id:"integrations/platform-sdk-features/store",title:"State Store",description:"The store-flows crate offers the ability to store key/value. We can build stateful serverless functions in flows.network.",source:"@site/docs/integrations/platform-sdk-features/store.md",sourceDirName:"integrations/platform-sdk-features",slug:"/integrations/platform-sdk-features/store",permalink:"/docs/integrations/platform-sdk-features/store",draft:!1,editUrl:"https://github.com/flows-network/docs/tree/main/docs/integrations/platform-sdk-features/store.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Timer",permalink:"/docs/integrations/platform-sdk-features/timers"},next:{title:"logging",permalink:"/docs/integrations/platform-sdk-features/logging"}},l={},c=[{value:"Usage",id:"usage",level:2},{value:"Flows that used the <code>store-flows</code> crate",id:"flows-that-used-the-store-flows-crate",level:2}],f={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"state-store"},"State Store"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/store-flows"},(0,o.kt)("inlineCode",{parentName:"a"},"store-flows")," crate")," offers the ability to store key/value. We can build stateful serverless functions in flows.network.\nBy enhancing the ability of your flows functions to persist and retrieve data, the library offers a simple way to keep track of state across multiple function invocations."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"The following example offers a taste of what this library can do:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use serde_json::json;\nuse lambda_flows::{request_received, send_response};\nuse store_flows::{get, set, Expire, ExpireKind};\n\n#[no_mangle]\npub fn run() {\n   if let Some((_qry, _body)) = request_received() {\n       let mut c = match get("count") {\n           Some(v) => v.as_u64().unwrap_or_default(),\n           None => 0,\n       };\n\n       c = c + 1;\n\n       set(\n           "count",\n           json!(c),\n           Some(Expire {\n               kind: ExpireKind::Ex,\n               value: 20,\n           }),\n       );\n\n       send_response(\n           200,\n           vec![(String::from("content-type"), String::from("text/html"))],\n           c.to_string().as_bytes().to_vec(),\n       );\n   }\n}\n')),(0,o.kt)("p",null,"This is a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/lambda-flows"},"Lambda flow")," function. It can show the times it has been called. When a request is received, we ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/store-flows/latest/store_flows/fn.get.html"},"get")," the previous count number from store, imcrement it by one, then ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/store-flows/latest/store_flows/fn.set.html"},"set")," it back to store."),(0,o.kt)("p",null,"The whole document is ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/store-flows"},"here"),"."),(0,o.kt)("h2",{id:"flows-that-used-the-store-flows-crate"},"Flows that used the ",(0,o.kt)("inlineCode",{parentName:"h2"},"store-flows")," crate"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/flows-network/telegram-gpt"},"Integrate ChatGPT into Telegram"),". the ",(0,o.kt)("inlineCode",{parentName:"li"},"store-flows")," crate is used to save the conversation of ChatGPT.")))}u.isMDXComponent=!0}}]);